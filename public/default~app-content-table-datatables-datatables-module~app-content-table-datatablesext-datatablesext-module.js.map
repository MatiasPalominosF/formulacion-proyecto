{"version":3,"sources":["ngx-window-token/lib/window.ts","ngx-clipboard/lib/ngx-clipboard.service.ts","ngx-clipboard/lib/ngx-clipboard.directive.ts","ngx-clipboard/lib/ngx-clipboard-if-supported.directive.ts","ngx-clipboard/lib/ngx-clipboard.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAGA,IAAa,MAAM,GAAG,IAAI,4DAAJ,CACpB,aADoB,EAEpB,OAAO,MAAP,KAAkB,WAAlB,IAAiC,MAAM,CAAC,QAAxC,GAAmD;AAAE,YAAU,EAAE,MAAd;AAAsB,SAAO;AAAA;AAAO;AAAmB;AAAxB;AAAA,WAAM,MAAN;AAAA;AAA/B,CAAnD,GAAmG,SAF/E,CAAtB;AAIC;AAAI;AAAkC;AAAqH;;AAAK;AAAI;AAAkC;AAAqH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP5T;AAAI;AAC2C;;;;IAUlC,gB;AACb;AAAQ;AAA2B;AAAyB;AAKxD,4BAAqC,QAArC,EAAwF,MAAxF,EAAmG;AAAA;;AAA9D;AAAmD;AALhF,uBAAc,IAAI,4CAAJ,EAAd;AACD,yBAAgD,KAAK,WAAL,CAAiB,YAAjB,EAAhD;AAEC,kBAA0B,EAA1B;AAE+F;AAC3G;AACO;AAAyB;AAC7B;;;;;8BADkB,M,EAAuB;AACpC,WAAK,MAAL,GAAc,MAAd;AACH;AACL;AACO;AAA0B;AACtB;;;;yBADK,O,EAAe;AACvB,UAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,OAA1B,EAAmC;AAC/B,eAAO,KAAK,gBAAL,CAAsB;AAAE,mBAAS,EAAE,KAAb;AAAoB,iBAAO,EAAP;AAApB,SAAtB,CAAP;AACH;AACT;;;AAAyB,UAAX,UAAU,GAAG,KAAK,eAAL,CAAqB,OAArB,CAAF;;AACjB,UAAI,UAAJ,EAAgB;AACZ,eAAO,KAAK,gBAAL,CAAsB;AAAE,iBAAO,EAAP,OAAF;AAAW,mBAAS,EAAE;AAAtB,SAAtB,CAAP;AACH;;AACD,aAAO,KAAK,gBAAL,CAAsB;AAAE,iBAAS,EAAE,KAAb;AAAoB,eAAO,EAAP;AAApB,OAAtB,CAAP;AACH;AACL;AACO;AAAmB;;;;;AAG1B;AACO;AAA0B;AAAmB;kCAA3B,O,EAA+C;AAChE,UAAI,OAAO,YAAY,gBAAnB,IAAuC,OAAO,YAAY,mBAA9D,EAAmF;AAC/E,YAAI,OAAO,CAAC,YAAR,CAAqB,UAArB,CAAJ,EAAsC;AAClC,gBAAM,IAAI,KAAJ,CAAU,mFAAV,CAAN;AACH;;AACD,eAAO,IAAP;AACH;;AACD,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;AACL;AACO;AAC0C;AAE9B;AAA2B;AAAmB;;;;yCAAjC,S,EAAiE;AAAA,UAAd,OAAc,uEAAJ,IAAI;;AACzF,UAAI;AACA,aAAK,YAAL,CAAkB,SAAlB;AACZ;;AAA6B,YAAX,EAAE,GAAG,KAAK,QAAL,EAAM;AACjB,aAAK,cAAL,CAAoB,OAAO,GAAG,SAAH,GAAe,SAA1C,EAAqD,KAAK,MAA1D;AACA,eAAO,EAAE,IAAI,KAAK,mBAAL,EAAb;AACH,OALD,CAKE,OAAO,KAAP,EAAc;AACZ,eAAO,KAAP;AACH;AACJ;AACL;AACO;AAC4D;AAEzD;;;;0CAAoB;AAAK;AACnB,UAAF,aAAa,GAAG,KAAK,MAAL,CAAY,eAAZ,CAAd;;AACR,UAAI,aAAa,IAAI,aAAa,CAAC,OAAnC,EAA4C;AACxC,YAAI,CAAC,aAAa,CAAC,OAAd,CAAsB,MAAtB,CAAL,EAAoC;AAChC,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH;AACL;AACO;AACqE;AACzC;AAElB;AAA6B;AAAmB;;;;oCAAtC,O,EAA4D;AAAA,UAA3C,SAA2C,uEAAlB,KAAK,QAAL,CAAc,IAAI;;AAAI;AACtB;AAE7D,UAAI,KAAK,YAAL,IAAqB,CAAC,SAAS,CAAC,QAAV,CAAmB,KAAK,YAAxB,CAA1B,EAAiE;AAC7D,aAAK,OAAL,CAAa,KAAK,YAAL,CAAkB,aAA/B;AACH;;AAED,UAAI,CAAC,KAAK,YAAV,EAAwB;AACpB,aAAK,YAAL,GAAoB,KAAK,kBAAL,CAAwB,KAAK,QAA7B,EAAuC,KAAK,MAA5C,CAApB;;AACA,YAAI;AACA,mBAAS,CAAC,WAAV,CAAsB,KAAK,YAA3B;AACH,SAFD,CAEE,OAAO,KAAP,EAAc;AACZ,gBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ;;AACD,WAAK,YAAL,CAAkB,KAAlB,GAA0B,OAA1B;AACR;;AACwB,UAAV,QAAQ,GAAG,KAAK,oBAAL,CAA0B,KAAK,YAA/B,EAA6C,KAA7C,CAAD;;AAChB,UAAI,KAAK,MAAL,CAAY,gBAAhB,EAAkC;AAC9B,aAAK,OAAL,CAAa,KAAK,YAAL,CAAkB,aAA/B;AACH;;AACD,aAAO,QAAP;AACH;AACL;AACO;AACwC;AAE3B;AAAmB;;;;8BAAuB;AAAA,UAA3C,SAA2C,uEAAlB,KAAK,QAAL,CAAc,IAAI;;AACtD,UAAI,KAAK,YAAT,EAAuB;AACnB,iBAAS,CAAC,WAAV,CAAsB,KAAK,YAA3B,EADmB,CAE/B;;AACY,aAAK,YAAL,GAAoB,SAApB;AACH;AACJ;AACL;AACO;AACqC;AAErC;AAA+B;AAAmB;;;;iCAAhC,Y,EAAoD;AACrE,kBAAY,CAAC,MAAb;AACA,kBAAY,CAAC,iBAAb,CAA+B,CAA/B,EAAkC,YAAY,CAAC,KAAb,CAAmB,MAArD;AACA,aAAO,YAAY,CAAC,KAAb,CAAmB,MAA1B;AACH;AACL;AACO;AAAgB;AACf;;;;+BADY;AACZ,aAAO,KAAK,QAAL,CAAc,WAAd,CAA0B,MAA1B,CAAP;AACH;AACL;AACO;AACkF;AAElF;AAA+B;AAAyB;AAAmB;;;;mCAAvD,Y,EAAsD,M,EAAc;AACvF,kBAAY,IAAI,YAAY,CAAC,KAAb,EAAhB;AACA,YAAM,CAAC,YAAP,GAAsB,eAAtB;AACH;AACL;AACO;AACyC;AAEzC;AAAsB;AAAyB;AAAmB;;;;uCAA1C,G,EAAe,M,EAAc;AAAI;AAC5D,UAAU,KAAK,GAAG,GAAG,CAAC,eAAJ,CAAoB,YAApB,CAAiC,KAAjC,MAA4C,KAA9D;AACJ;;AAAyB,UAAb,EAAa;AACjB,QAAE,GAAG,GAAG,CAAC,aAAJ,CAAkB,UAAlB,CAAL,CAHoD,CAI5D;;AACQ,QAAE,CAAC,KAAH,CAAS,QAAT,GAAoB,MAApB,CALoD,CAM5D;;AACQ,QAAE,CAAC,KAAH,CAAS,MAAT,GAAkB,GAAlB;AACA,QAAE,CAAC,KAAH,CAAS,OAAT,GAAmB,GAAnB;AACA,QAAE,CAAC,KAAH,CAAS,MAAT,GAAkB,GAAlB,CAToD,CAU5D;;AACQ,QAAE,CAAC,KAAH,CAAS,QAAT,GAAoB,UAApB;AACA,QAAE,CAAC,KAAH,CAAS,KAAK,GAAG,OAAH,GAAa,MAA3B,IAAqC,SAArC,CAZoD,CAa5D;;AACA;;AAAyB,UAAX,SAAS,GAAG,MAAM,CAAC,WAAP,IAAsB,GAAG,CAAC,eAAJ,CAAoB,SAA3C;AACjB,QAAE,CAAC,KAAH,CAAS,GAAT,GAAe,SAAS,GAAG,IAA3B;AACA,QAAE,CAAC,YAAH,CAAgB,UAAhB,EAA4B,EAA5B;AACA,aAAO,EAAP;AACH;AACL;AACO;AACuE;AACvD;AAEL;AAAmB;;;;qCAAT,Q,EAA4B;AAChD,WAAK,WAAL,CAAiB,IAAjB,CAAsB,QAAtB;AACH;AACL;AACO;AACyC;AAE9B;AAAmB;;;;oCAAV,Q,EAA4B;AAC/C,WAAK,gBAAL,CAAsB,QAAtB;AACH;;;wBAzIqB;AAClB,aAAO,CAAC,CAAC,KAAK,QAAL,CAAc,qBAAhB,IAAyC,CAAC,CAAC,KAAK,QAAL,CAAc,qBAAd,CAAoC,MAApC,CAA3C,IAA0F,CAAC,CAAC,KAAK,MAAxG;AACH;;;;;;iCA1BJ,wB,CAAU,C,EAAA;AAAC,SAAE,KAAU,KAAE,gBAAZ,EAAoB,gHAApB,EAAoB,kHAApB,CAAF;AAAsB,C;;;;;cAC7B;;AAAC;;AAAmB;AAAA,UACU;AAAA;AAAA;AAAA,YAKlB,oDALkB;AAKZ,aAAC,wDAAD;AALY;AAAA,GADV,EAMgB;AAAA;AAAA;AAAA,YAAgB,sDAAQ;AAAxB,OAAwB;AAAA,YAAI,oDAAJ;AAAU,aAAC,uDAAD;AAAV,KAAxB;AAAA,GANhB;AAAA;AAMoE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ5C,C;AAAE;AAAI;AAEjD;AAEiC;;;ICrB1B,kB;AAAqB;AAAQ;AAChC;AAiBN,8BAAoB,YAApB,EAAkD;AAAA;;AAA9B;AAJb,uBAAgD,IAAI,0DAAJ,EAAhD;AAGA,qBAA+B,IAAI,0DAAJ,EAA/B;AAC+C,G,CAC1D;;AACwC;AACjC;AAEP;;;;;+BAFmB,CAAK;AACxB;AACO;AAAmB;;;;kCAAJ;AACd,WAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,SAA/B;AACH;AACL;AACO;AAAwB;AAC3B;;;;4BAAe,K,EAAY;AACvB,UAAI,CAAC,KAAK,YAAL,CAAkB,WAAvB,EAAoC;AAChC,aAAK,YAAL,CAAkB,KAAlB,EAAyB,SAAzB,EAAoC,KAApC;AACH,OAFD,MAEO,IAAI,KAAK,SAAL,IAAkB,KAAK,YAAL,CAAkB,aAAlB,CAAgC,KAAK,SAArC,CAAtB,EAAuE;AAC1E,aAAK,YAAL,CAAkB,KAAK,YAAL,CAAkB,oBAAlB,CAAuC,KAAK,SAA5C,CAAlB,EAA0E,KAAK,SAAL,CAAe,KAAzF,EAAgG,KAAhG;AACH,OAFM,MAEA,IAAI,KAAK,SAAT,EAAoB;AACvB,aAAK,YAAL,CAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,SAAvC,EAAkD,KAAK,SAAvD,CAAlB,EAAqF,KAAK,SAA1F,EAAqG,KAArG;AACH;AACJ;AACL;AACO;AACkD;AAC1C;AAEJ;AAAgC;AAAwB;AAAmB;;;;iCAA7D,S,EAAoB,a,EAAmC,K,EAAY;AAC5F;AAAyB,UAAb,QAAQ,GAAuB;AAC/B,iBAAS,EAAE,SADoB;AAE/B,aAAK,EAAL;AAF+B,OAAlB;;AAKjB,UAAI,SAAJ,EAAe;AACX,gBAAQ,GAAG,MAAM,CAAC,MAAP,CAAc,QAAd,EAAwB;AAC/B,iBAAO,EAAE,aADsB;AAE/B,wBAAc,EAAE,KAAK;AAFU,SAAxB,CAAX;AAIA,aAAK,WAAL,CAAiB,IAAjB,CAAsB,QAAtB;AACH,OAND,MAMO;AACH,aAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH;;AAED,WAAK,YAAL,CAAkB,gBAAlB,CAAmC,QAAnC;AACH;;;;;;mCA9DJ,0B,CAAS,C,EAAC;AAAA,mBACP,kBADO,EACG,gEACb,gBADa,CADH;AAEV,C;;;;;;;;;;;;;;;;;;;;eACI;;;AAAC;;AAAmB;AAAA,UACnB;AAAA,UANG;AAMH,GADmB;AAAA;;AALM;AAEvB;AAAA,UAKH,mDALG;AAKE,WAAC,cAAD;AALF,IAFuB;AAQ1B;AAAA,UACA,mDAAK;AADL,IAR0B;AAU7B;AAAA,UAEG,mDAAK;AAFR,IAV6B;AAa7B;AAAA,UAEG,mDAAK;AAFR,IAb6B;AAgB7B;AAAA,UAEG,oDAAM;AAFT,IAhB6B;AAmB7B;AAAA,UAEG,oDAAM;AAFT,IAnB6B;AAsB7B;AAAA,UAUG,0DAVH;AAUe,WAAC,OAAD,EAAU,CAAC,eAAD,CAAV;AAVf;AAtB6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCzB,C;AAAE;AAAI;AACD;AAEe;;;IChCb,6B;AAAgC;AAAQ;AAE5C;AAAoC;AACtB;AAFnB,yCACY,iBADZ,EAEY,iBAFZ,EAGY,YAHZ,EAG0C;AAAA;;AAF9B;AACA;AACA;AACR;AACR;AACO;AACE;;;;;+BADG;AACJ,UAAI,KAAK,iBAAL,CAAuB,WAA3B,EAAwC;AACpC,aAAK,iBAAL,CAAuB,kBAAvB,CAA0C,KAAK,YAA/C;AACH;AACJ;;;;;;8CAdJ,qC,CAAU,C,EAAA;AAAA,SACP,KAAQ,KAAE,6BAAV,EAAqC,gEACxC,gBADwC,CAArC,EACH,+HADG,EACH,0HADG,CADO;AAEV,C;;;;8CACI,E;;AAAC;;AAAmB;AAAA,UAEzB;AAAA,UAPS;AAOT,GAFyB,EALI;AAAA,UAFY,8DAAgB;AAE5B,GAKJ,EAPoC;AAAA,UAAjC,yDAAW;AAAsB,GAOpC;AAAA;;;;;;;;;;;;;;;;;;;AAPmB,C;AAAE;AAAI;AAEjD;AAIC;;;ICKW,e;;;;sFALZ;AAAA,MAAQ;AAAR,C;AACG,eAAU,KAAV,GAAU,+DACV;AAAA,SAAY,EAAE,SAAC,uBAAD,CAAqB,CAArB,EAAqB;AAAA,gBAA6B,CAAC,mBAA9B;AAC5B,GADP;AACS,SAAC;AADV,CADU,CAAV;;;GAE2D,OAAC,SAAD,KAC9D,WAD8D,IAC9D,S,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I;AAAA,C;;;;;;;;;;;;;AACI,C;AAAE;AAAI;AACE;AAAqH;;AAAK;AAAI;AAAkC;AAAqH;;AAAK;AAAI;AAAkC;AAAqH","file":"default~app-content-table-datatables-datatables-module~app-content-table-datatablesext-datatablesext-module.js","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n  'WindowToken',\r\n  typeof window !== 'undefined' && window.document ? { providedIn: 'root', factory: () => window } : undefined\r\n);\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { ClipboardParams, IClipboardResponse } from './interface';\r\n\r\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    private config: ClipboardParams = {};\r\n\r\n    constructor(@Inject(DOCUMENT) public document: any, @Optional() @Inject(WINDOW) private window: any) {}\r\n\r\n    public configure(config: ClipboardParams) {\r\n        this.config = config;\r\n    }\r\n\r\n    public copy(content: string): void {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    public isCopySuccessInIE11(): boolean {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    public destroy(container: HTMLElement = this.document.body): void {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window): void {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyResponse(response: IClipboardResponse): void {\r\n        this.copySubject.next(response);\r\n    }\r\n\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse): void {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement | HTMLTextAreaElement;\r\n    @Input()\r\n    public container: HTMLElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(\r\n        private _clipboardService: ClipboardService,\r\n        private _viewContainerRef: ViewContainerRef,\r\n        private _templateRef: TemplateRef<any>\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n"],"sourceRoot":"webpack:///"}